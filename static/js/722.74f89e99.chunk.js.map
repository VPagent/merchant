{"version":3,"file":"static/js/722.74f89e99.chunk.js","mappings":"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","sources":["webpack://merchant/./src/components/Modal/modal.module.scss?2290","components/Modal/Modal.tsx","webpack://merchant/./src/components/ResponseReceived/responseReceived.module.scss?12f8","components/ResponseReceived/ResponseReceived.tsx","webpack://merchant/./src/components/ConnectGoogleBox/connectGoogleBox.module.scss?597c","webpack://merchant/./src/components/ReadyToGo/readyToGo.module.scss?8677","components/ReadyToGo/ReadyToGo.tsx","components/ConnectGoogleBox/ConnectGoogleBox.tsx","webpack://merchant/./src/components/DontUseGmail/dontUseGmail.module.scss?5918","components/DontUseGmail/DontUseGmail.tsx","pages/ConnectGooglePage/ConnectGooglePage.tsx","services/API.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"modal_modal__e093m\"};","import { ReactNode } from 'react'\nimport { createPortal } from 'react-dom'\nimport Container from '../Container'\nimport s from './modal.module.scss'\n\ntype Props = {\n    children: ReactNode\n}\n\n// const portal = document.getElementById('portal')!\n\n\nconst Modal:React.FC<Props> = ({children}) => {\n\n    return(\n\n        // <div className={s.backDrop}>\n       \n            <div className={s.modal}>\n                {children}\n            </div>\n        // </div>      \n    )\n}\n\n\nexport default Modal","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"responseReceived_wrapper__6WNRS\",\"icon\":\"responseReceived_icon__SRxnM\",\"title\":\"responseReceived_title__lkO4V\",\"text\":\"responseReceived_text__+mFAT\",\"btn\":\"responseReceived_btn__-kyFl\"};","import s from './responseReceived.module.scss'\nimport Button from 'react-bootstrap/Button';\nimport {BsFillCheckCircleFill} from 'react-icons/bs';\nimport Modal from '../Modal';\n\ntype Props = {\n    onClose: Function,\n    text: string\n}\n\nconst ResponseReceived:React.FC<Props> = ({onClose, text}) => {\n\n    \n    return(\n        <Modal>\n            <div className={s.wrapper}>\n                <BsFillCheckCircleFill size={80} className={s.icon}/>\n                <h2 className={s.title}>Response received</h2>\n                <p className={s.text}>\n                    Thank you for your interest in Chad!\n                    We’ll be hard at work building integrations\n                    to support your {text}.\n                </p>\n                <Button variant=\"primary\" className={s.btn} onClick={() => onClose()}>Done</Button>\n            </div>\n        </Modal>\n    )\n}\n\nexport default ResponseReceived","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"connectGoogleBox_wrapper__HpaAx\",\"title\":\"connectGoogleBox_title__kCQvr\",\"text\":\"connectGoogleBox_text__spjgw\",\"list\":\"connectGoogleBox_list__geu3f\",\"list_Item\":\"connectGoogleBox_list_Item__DSQeh\",\"list_icon\":\"connectGoogleBox_list_icon__0ot7w\",\"list_title\":\"connectGoogleBox_list_title__OaCF1\",\"list_text\":\"connectGoogleBox_list_text__Ikjbl\",\"btn\":\"connectGoogleBox_btn__nYhJT\",\"btn_icon\":\"connectGoogleBox_btn_icon__w0l06\",\"googleIcon\":\"connectGoogleBox_googleIcon__wuR3g\",\"btn_text\":\"connectGoogleBox_btn_text__zfjle\",\"linkBtn\":\"connectGoogleBox_linkBtn__FIoKf\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"readyToGo_wrapper__d9ztt\",\"icon\":\"readyToGo_icon__FyhG4\",\"title\":\"readyToGo_title__QWrtN\",\"text\":\"readyToGo_text__gHMf-\",\"btn\":\"readyToGo_btn__-0j1E\"};","import s from './readyToGo.module.scss'\nimport Button from 'react-bootstrap/Button';\nimport {BsFillCheckCircleFill} from 'react-icons/bs';\nimport {useNavigate} from 'react-router-dom';\nimport Modal from '../Modal';\n\n\nconst ReadyToGo:React.FC = () => {\n    \n    const navigate = useNavigate()\n\n    const handleClickOnOk = () => {\n        navigate(\"/login\")\n    }\n    \n\n    return(\n        <Modal>\n            <div className={s.wrapper}>\n            <BsFillCheckCircleFill size={80} className={s.icon}/>\n                <h2 className={s.title}>You’re ready to go!</h2>\n                <p className={s.text}>\n                    Chad doesn’t support mobile browsers.\n                    To access your dashboard, login from your laptop or desktop computer.\n                </p>\n                <Button variant=\"primary\" className={s.btn} onClick={handleClickOnOk}>Ok</Button>\n            </div>\n        </Modal>\n    )\n}\n\n\nexport default ReadyToGo","import s from './connectGoogleBox.module.scss'\nimport {BsCheckLg} from 'react-icons/bs';\nimport Button from 'react-bootstrap/Button';\nimport { getGoogle, register } from '../../services/API';\nimport { useGlobalState } from '../../globalState/store';\nimport { useEffect, useState } from 'react';\nimport ReadyToGo from '../ReadyToGo';\nimport SocialIcon from '../../images/SocialIcon2x.png';\nimport { toast } from 'react-toastify';\n\ntype Props = {\n    toOpen: Function\n}\n\nconst ConnectGoogleBox:React.FC<Props> = ({toOpen}) => {\n\n    const [email] = useGlobalState('email')\n    const [name] = useGlobalState('name')\n    const [password] = useGlobalState('password')\n    const [shopResponse] = useGlobalState('shopResponse')\n    const [googleToken, setGoogleToken] = useGlobalState('googleToken')\n    const [welcome, setWelcome] = useGlobalState('welcome')\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [step, setStep] = useGlobalState('step')\n    \n    useEffect(() => {\n\n        if(googleToken && shopResponse){\n            const body = {\n                \"name\": name,\n                \"email\": email,\n                \"password\": password,\n                \"shop_token\": shopResponse?.token,\n                \"google_token\": googleToken\n            }\n            register(body).then(res => setWelcome(res))\n        }\n    }, [googleToken])\n\n    const handleClickConnect = () => {   \n        getGoogle()\n        .then(res => setGoogleToken(res.token))\n        .then(() => {\n            setIsModalOpen(true)\n            setStep(4)})\n        .catch((error:any) => console.log(error.message))\n        .finally(() =>  toast.success('Customer support email has been added'))\n\n    }\n\n    return(\n        <div className={s.wrapper}>\n            {(isModalOpen && googleToken && welcome) ? <ReadyToGo /> \n            : <>\n            <h1 className={s.title}>Connect to customer support email</h1>\n            <p className={s.text}>\n                Allows Chad to send automated responses\n                on your behalf from your usual support mailbox\n            </p>\n            <ul className={s.list}>\n                <li className={s.list_Item}>\n                    <span><BsCheckLg className={s.list_icon}/></span>\n                    <h2 className={s.list_title}>\n                        Contextual responses\n                    </h2>\n                    <p className={s.list_text}>\n                        Custom responses to any support situation from \n                        “where’s my stuff?” to “I want a refund”\n                    </p>\n                </li>\n                <li className={s.list_Item}>\n                    <span><BsCheckLg className={s.list_icon}/></span>\n                    <h2 className={s.list_title}>\n                        Reply from anywhere\n                    </h2>\n                    <p className={s.list_text}>\n                        Respond to your customers via email or Chad \n                        chat—it’s all saved in the same thread\n                    </p>\n                </li>\n                <li className={s.list_Item}>\n                    <span><BsCheckLg className={s.list_icon}/></span>\n                    <h2 className={s.list_title}>\n                        Categorical inbox tags\n                    </h2>\n                    <p className={s.list_text}>\n                        Tags your emails by category so you know what\n                        to expect before even opening an email\n                    </p>\n                </li>\n            </ul>\n            <Button variant=\"primary\" className={s.btn} onClick={handleClickConnect}>\n                <span className={s.btn_icon}>\n                    <img src={SocialIcon} alt=\"google\" className={s.googleIcon}/>\n                </span>\n                <span className={s.btn_text}>Connect Gmail account</span>\n            </Button>\n            <button type=\"button\" onClick={() => toOpen()} className={s.linkBtn}>I don’t use Gmail</button>\n            </>}\n        </div>\n    )\n}\n\nexport default ConnectGoogleBox","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"dontUseGmail_wrapper__q8cSZ\",\"title\":\"dontUseGmail_title__3MCCL\",\"form\":\"dontUseGmail_form__FkOUo\",\"form_label\":\"dontUseGmail_form_label__COrCV\",\"form_input\":\"dontUseGmail_form_input__IRSBE\",\"form_btn\":\"dontUseGmail_form_btn__lo3I9\",\"form_text\":\"dontUseGmail_form_text__B47zo\",\"form_text_link\":\"dontUseGmail_form_text_link__sZFk-\"};","import s from './dontUseGmail.module.scss'\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport ResponseReceived from '../ResponseReceived';\nimport { toast } from 'react-toastify';\n\ntype Props = {\n    toOpen: Function\n}\n\nconst DontUseGmail:React.FC<Props> = ({toOpen}) => {\n\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [value, setValue] = useState('')\n\n    const handleOpenModal = () => {\n        setIsModalOpen(prev => !prev)\n    }\n\n    const onFormSubmit = (e:FormEvent) => {\n        e.preventDefault()\n        if(value === \"other\"){\n            return toast.warning(\"You must to choose between platforms\")\n        }\n        setIsModalOpen(prev => !prev)\n        toast.warning(\"Chad Beta is currently only integrated with Gmail.\")\n\n    }\n\n    const handleChangeSelect = (e:ChangeEvent<HTMLSelectElement>) => {\n        setValue(e.target.value)\n    }\n\n    return(\n        <div className={s.wrapper}>\n            {isModalOpen ? <ResponseReceived onClose={handleOpenModal} text={\"email client\"} />\n            : <>\n            <h1 className={s.title}> Don’t use Gmail?</h1>\n            <p className={s.text}>\n                Chad Beta is currently only integrated with Gmail.\n                We’ll send you an email when Chad becomes compatible \n                with your support ticket platform.\n            </p>\n            <Form  className={s.form} onSubmit={onFormSubmit}>\n                <Form.Group>\n                    <Form.Label className={s.form_label}>Platform</Form.Label>\n                    <Form.Select className={s.form_input} onChange={handleChangeSelect} >\n                        <option value=\"other\" defaultValue={\"other\"} hidden>Select platform</option>\n                        <option value=\"Microsoft Outlook\">Microsoft Outlook</option>\n                        <option value=\"Yahoo\">Yahoo</option>\n                        <option value=\"other\">Other</option>\n                    </Form.Select>\n                </Form.Group>\n        <Button variant=\"primary\" type='submit' className={s.form_btn}>Submit</Button>\n        <p className={s.form_text}>Actually use Gmail? <span onClick={() => toOpen()} className={s.form_text_link}>Connect</span></p>\n      </Form>\n      </>}\n        </div>\n\n    )\n}\n\nexport default DontUseGmail","import { useEffect, useState } from \"react\"\nimport ConnectGoogleBox from \"../../components/ConnectGoogleBox\"\nimport Container from \"../../components/Container\"\nimport DontUseGmail from \"../../components/DontUseGmail\"\nimport { useGlobalState } from \"../../globalState/store\"\n\n\nconst ConnectGooglePage:React.FC = () => {\n\n    const [isUse, setIsUse] = useState(true)\n    const [email] = useGlobalState('email') \n    const [step, setStep] = useGlobalState('step')\n\n    useEffect(() => {\n        if(!email){\n            setStep(1)\n        }\n    }, [email])\n    const handleClickToOpen = () => {\n        setIsUse(prev => !prev)\n    }\n\n    return(\n        <>\n                {isUse ? <ConnectGoogleBox toOpen={handleClickToOpen} />\n                 : <DontUseGmail toOpen={handleClickToOpen}/>}\n        </>\n    )\n}\n\n\nexport default ConnectGooglePage","import  axios  from \"axios\";\nimport { GoogleRes, RegBody, RegResponse, Shopify } from \"../types/types\";\n\n\nexport const getShopify = async (name:string):Promise<Shopify> => {\n    const URL = `https://vast-basin-98801.herokuapp.com/shopify?name=${name}`\n    const response = await axios.get(URL)\n    return response.data\n}\n\nexport const getGoogle = async ():Promise<GoogleRes> => {\n    const URL = \"https://vast-basin-98801.herokuapp.com/google\"\n    const response = await axios.get(URL)\n    return response.data\n}\n\nexport const register = async (body:RegBody):Promise<RegResponse> => {\n    const URL = \"https://vast-basin-98801.herokuapp.com/register\"\n    const response = await axios.post(URL, body)\n    return response.data\n}\n\n\n\n\n\n\n\n"],"names":["children","className","s","onClose","text","Modal","size","Button","variant","onClick","navigate","useNavigate","toOpen","useGlobalState","email","name","password","shopResponse","googleToken","setGoogleToken","welcome","setWelcome","useState","isModalOpen","setIsModalOpen","setStep","useEffect","body","token","register","then","res","getGoogle","catch","error","console","log","message","finally","toast","src","alt","type","value","setValue","ResponseReceived","prev","Form","onSubmit","e","preventDefault","onChange","target","defaultValue","hidden","isUse","setIsUse","handleClickToOpen","getShopify","URL","axios","response","data"],"sourceRoot":""}